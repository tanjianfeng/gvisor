// automatically generated by stateify.

package tty

import (
	"gvisor.dev/gvisor/pkg/state"
)

func (x *dirInodeOperations) StateTypeName() string {
	return "pkg/sentry/fs/tty.dirInodeOperations"
}

func (x *dirInodeOperations) StateFields() []string {
	return []string{
		"InodeSimpleAttributes",
		"msrc",
		"master",
		"slaves",
		"dentryMap",
		"next",
	}
}

func (x *dirInodeOperations) beforeSave() {}

func (x *dirInodeOperations) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.InodeSimpleAttributes)
	m.Save(1, &x.msrc)
	m.Save(2, &x.master)
	m.Save(3, &x.slaves)
	m.Save(4, &x.dentryMap)
	m.Save(5, &x.next)
}

func (x *dirInodeOperations) afterLoad() {}

func (x *dirInodeOperations) StateLoad(m state.Source) {
	m.Load(0, &x.InodeSimpleAttributes)
	m.Load(1, &x.msrc)
	m.Load(2, &x.master)
	m.Load(3, &x.slaves)
	m.Load(4, &x.dentryMap)
	m.Load(5, &x.next)
}

func (x *dirFileOperations) StateTypeName() string {
	return "pkg/sentry/fs/tty.dirFileOperations"
}

func (x *dirFileOperations) StateFields() []string {
	return []string{
		"di",
		"dirCursor",
	}
}

func (x *dirFileOperations) beforeSave() {}

func (x *dirFileOperations) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.di)
	m.Save(1, &x.dirCursor)
}

func (x *dirFileOperations) afterLoad() {}

func (x *dirFileOperations) StateLoad(m state.Source) {
	m.Load(0, &x.di)
	m.Load(1, &x.dirCursor)
}

func (x *filesystem) StateTypeName() string {
	return "pkg/sentry/fs/tty.filesystem"
}

func (x *filesystem) StateFields() []string {
	return []string{}
}

func (x *filesystem) beforeSave() {}

func (x *filesystem) StateSave(m state.Sink) {
	x.beforeSave()
}

func (x *filesystem) afterLoad() {}

func (x *filesystem) StateLoad(m state.Source) {
}

func (x *superOperations) StateTypeName() string {
	return "pkg/sentry/fs/tty.superOperations"
}

func (x *superOperations) StateFields() []string {
	return []string{}
}

func (x *superOperations) beforeSave() {}

func (x *superOperations) StateSave(m state.Sink) {
	x.beforeSave()
}

func (x *superOperations) afterLoad() {}

func (x *superOperations) StateLoad(m state.Source) {
}

func (x *lineDiscipline) StateTypeName() string {
	return "pkg/sentry/fs/tty.lineDiscipline"
}

func (x *lineDiscipline) StateFields() []string {
	return []string{
		"size",
		"inQueue",
		"outQueue",
		"termios",
		"column",
	}
}

func (x *lineDiscipline) beforeSave() {}

func (x *lineDiscipline) StateSave(m state.Sink) {
	x.beforeSave()
	if !state.IsZeroValue(&x.masterWaiter) {
		state.Failf("masterWaiter is %#v, expected zero", &x.masterWaiter)
	}
	if !state.IsZeroValue(&x.slaveWaiter) {
		state.Failf("slaveWaiter is %#v, expected zero", &x.slaveWaiter)
	}
	m.Save(0, &x.size)
	m.Save(1, &x.inQueue)
	m.Save(2, &x.outQueue)
	m.Save(3, &x.termios)
	m.Save(4, &x.column)
}

func (x *lineDiscipline) afterLoad() {}

func (x *lineDiscipline) StateLoad(m state.Source) {
	m.Load(0, &x.size)
	m.Load(1, &x.inQueue)
	m.Load(2, &x.outQueue)
	m.Load(3, &x.termios)
	m.Load(4, &x.column)
}

func (x *outputQueueTransformer) StateTypeName() string {
	return "pkg/sentry/fs/tty.outputQueueTransformer"
}

func (x *outputQueueTransformer) StateFields() []string {
	return []string{}
}

func (x *outputQueueTransformer) beforeSave() {}

func (x *outputQueueTransformer) StateSave(m state.Sink) {
	x.beforeSave()
}

func (x *outputQueueTransformer) afterLoad() {}

func (x *outputQueueTransformer) StateLoad(m state.Source) {
}

func (x *inputQueueTransformer) StateTypeName() string {
	return "pkg/sentry/fs/tty.inputQueueTransformer"
}

func (x *inputQueueTransformer) StateFields() []string {
	return []string{}
}

func (x *inputQueueTransformer) beforeSave() {}

func (x *inputQueueTransformer) StateSave(m state.Sink) {
	x.beforeSave()
}

func (x *inputQueueTransformer) afterLoad() {}

func (x *inputQueueTransformer) StateLoad(m state.Source) {
}

func (x *masterInodeOperations) StateTypeName() string {
	return "pkg/sentry/fs/tty.masterInodeOperations"
}

func (x *masterInodeOperations) StateFields() []string {
	return []string{
		"SimpleFileInode",
		"d",
	}
}

func (x *masterInodeOperations) beforeSave() {}

func (x *masterInodeOperations) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.SimpleFileInode)
	m.Save(1, &x.d)
}

func (x *masterInodeOperations) afterLoad() {}

func (x *masterInodeOperations) StateLoad(m state.Source) {
	m.Load(0, &x.SimpleFileInode)
	m.Load(1, &x.d)
}

func (x *masterFileOperations) StateTypeName() string {
	return "pkg/sentry/fs/tty.masterFileOperations"
}

func (x *masterFileOperations) StateFields() []string {
	return []string{
		"d",
		"t",
	}
}

func (x *masterFileOperations) beforeSave() {}

func (x *masterFileOperations) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.d)
	m.Save(1, &x.t)
}

func (x *masterFileOperations) afterLoad() {}

func (x *masterFileOperations) StateLoad(m state.Source) {
	m.Load(0, &x.d)
	m.Load(1, &x.t)
}

func (x *queue) StateTypeName() string {
	return "pkg/sentry/fs/tty.queue"
}

func (x *queue) StateFields() []string {
	return []string{
		"readBuf",
		"waitBuf",
		"waitBufLen",
		"readable",
		"transformer",
	}
}

func (x *queue) beforeSave() {}

func (x *queue) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.readBuf)
	m.Save(1, &x.waitBuf)
	m.Save(2, &x.waitBufLen)
	m.Save(3, &x.readable)
	m.Save(4, &x.transformer)
}

func (x *queue) afterLoad() {}

func (x *queue) StateLoad(m state.Source) {
	m.Load(0, &x.readBuf)
	m.Load(1, &x.waitBuf)
	m.Load(2, &x.waitBufLen)
	m.Load(3, &x.readable)
	m.Load(4, &x.transformer)
}

func (x *slaveInodeOperations) StateTypeName() string {
	return "pkg/sentry/fs/tty.slaveInodeOperations"
}

func (x *slaveInodeOperations) StateFields() []string {
	return []string{
		"SimpleFileInode",
		"d",
		"t",
	}
}

func (x *slaveInodeOperations) beforeSave() {}

func (x *slaveInodeOperations) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.SimpleFileInode)
	m.Save(1, &x.d)
	m.Save(2, &x.t)
}

func (x *slaveInodeOperations) afterLoad() {}

func (x *slaveInodeOperations) StateLoad(m state.Source) {
	m.Load(0, &x.SimpleFileInode)
	m.Load(1, &x.d)
	m.Load(2, &x.t)
}

func (x *slaveFileOperations) StateTypeName() string {
	return "pkg/sentry/fs/tty.slaveFileOperations"
}

func (x *slaveFileOperations) StateFields() []string {
	return []string{
		"si",
	}
}

func (x *slaveFileOperations) beforeSave() {}

func (x *slaveFileOperations) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.si)
}

func (x *slaveFileOperations) afterLoad() {}

func (x *slaveFileOperations) StateLoad(m state.Source) {
	m.Load(0, &x.si)
}

func (x *Terminal) StateTypeName() string {
	return "pkg/sentry/fs/tty.Terminal"
}

func (x *Terminal) StateFields() []string {
	return []string{
		"AtomicRefCount",
		"n",
		"d",
		"ld",
		"masterKTTY",
		"slaveKTTY",
	}
}

func (x *Terminal) beforeSave() {}

func (x *Terminal) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.AtomicRefCount)
	m.Save(1, &x.n)
	m.Save(2, &x.d)
	m.Save(3, &x.ld)
	m.Save(4, &x.masterKTTY)
	m.Save(5, &x.slaveKTTY)
}

func (x *Terminal) afterLoad() {}

func (x *Terminal) StateLoad(m state.Source) {
	m.Load(0, &x.AtomicRefCount)
	m.Load(1, &x.n)
	m.Load(2, &x.d)
	m.Load(3, &x.ld)
	m.Load(4, &x.masterKTTY)
	m.Load(5, &x.slaveKTTY)
}

func init() {
	state.Register((*dirInodeOperations)(nil))
	state.Register((*dirFileOperations)(nil))
	state.Register((*filesystem)(nil))
	state.Register((*superOperations)(nil))
	state.Register((*lineDiscipline)(nil))
	state.Register((*outputQueueTransformer)(nil))
	state.Register((*inputQueueTransformer)(nil))
	state.Register((*masterInodeOperations)(nil))
	state.Register((*masterFileOperations)(nil))
	state.Register((*queue)(nil))
	state.Register((*slaveInodeOperations)(nil))
	state.Register((*slaveFileOperations)(nil))
	state.Register((*Terminal)(nil))
}
