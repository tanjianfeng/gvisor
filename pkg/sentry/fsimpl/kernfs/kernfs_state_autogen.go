// automatically generated by stateify.

package kernfs

import (
	"gvisor.dev/gvisor/pkg/state"
)

func (x *DynamicBytesFile) StateTypeName() string {
	return "pkg/sentry/fsimpl/kernfs.DynamicBytesFile"
}

func (x *DynamicBytesFile) StateFields() []string {
	return []string{
		"InodeAttrs",
		"InodeNoopRefCount",
		"InodeNotDirectory",
		"InodeNotSymlink",
		"locks",
		"data",
	}
}

func (x *DynamicBytesFile) beforeSave() {}

func (x *DynamicBytesFile) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.InodeAttrs)
	m.Save(1, &x.InodeNoopRefCount)
	m.Save(2, &x.InodeNotDirectory)
	m.Save(3, &x.InodeNotSymlink)
	m.Save(4, &x.locks)
	m.Save(5, &x.data)
}

func (x *DynamicBytesFile) afterLoad() {}

func (x *DynamicBytesFile) StateLoad(m state.Source) {
	m.Load(0, &x.InodeAttrs)
	m.Load(1, &x.InodeNoopRefCount)
	m.Load(2, &x.InodeNotDirectory)
	m.Load(3, &x.InodeNotSymlink)
	m.Load(4, &x.locks)
	m.Load(5, &x.data)
}

func (x *DynamicBytesFD) StateTypeName() string {
	return "pkg/sentry/fsimpl/kernfs.DynamicBytesFD"
}

func (x *DynamicBytesFD) StateFields() []string {
	return []string{
		"FileDescriptionDefaultImpl",
		"DynamicBytesFileDescriptionImpl",
		"LockFD",
		"vfsfd",
		"inode",
	}
}

func (x *DynamicBytesFD) beforeSave() {}

func (x *DynamicBytesFD) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.FileDescriptionDefaultImpl)
	m.Save(1, &x.DynamicBytesFileDescriptionImpl)
	m.Save(2, &x.LockFD)
	m.Save(3, &x.vfsfd)
	m.Save(4, &x.inode)
}

func (x *DynamicBytesFD) afterLoad() {}

func (x *DynamicBytesFD) StateLoad(m state.Source) {
	m.Load(0, &x.FileDescriptionDefaultImpl)
	m.Load(1, &x.DynamicBytesFileDescriptionImpl)
	m.Load(2, &x.LockFD)
	m.Load(3, &x.vfsfd)
	m.Load(4, &x.inode)
}

func (x *StaticDirectory) StateTypeName() string {
	return "pkg/sentry/fsimpl/kernfs.StaticDirectory"
}

func (x *StaticDirectory) StateFields() []string {
	return []string{
		"InodeNotSymlink",
		"InodeDirectoryNoNewChildren",
		"InodeAttrs",
		"InodeNoDynamicLookup",
		"OrderedChildren",
		"locks",
		"fdOpts",
	}
}

func (x *StaticDirectory) beforeSave() {}

func (x *StaticDirectory) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.InodeNotSymlink)
	m.Save(1, &x.InodeDirectoryNoNewChildren)
	m.Save(2, &x.InodeAttrs)
	m.Save(3, &x.InodeNoDynamicLookup)
	m.Save(4, &x.OrderedChildren)
	m.Save(5, &x.locks)
	m.Save(6, &x.fdOpts)
}

func (x *StaticDirectory) afterLoad() {}

func (x *StaticDirectory) StateLoad(m state.Source) {
	m.Load(0, &x.InodeNotSymlink)
	m.Load(1, &x.InodeDirectoryNoNewChildren)
	m.Load(2, &x.InodeAttrs)
	m.Load(3, &x.InodeNoDynamicLookup)
	m.Load(4, &x.OrderedChildren)
	m.Load(5, &x.locks)
	m.Load(6, &x.fdOpts)
}

func (x *slotList) StateTypeName() string {
	return "pkg/sentry/fsimpl/kernfs.slotList"
}

func (x *slotList) StateFields() []string {
	return []string{
		"head",
		"tail",
	}
}

func (x *slotList) beforeSave() {}

func (x *slotList) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.head)
	m.Save(1, &x.tail)
}

func (x *slotList) afterLoad() {}

func (x *slotList) StateLoad(m state.Source) {
	m.Load(0, &x.head)
	m.Load(1, &x.tail)
}

func (x *slotEntry) StateTypeName() string {
	return "pkg/sentry/fsimpl/kernfs.slotEntry"
}

func (x *slotEntry) StateFields() []string {
	return []string{
		"next",
		"prev",
	}
}

func (x *slotEntry) beforeSave() {}

func (x *slotEntry) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.next)
	m.Save(1, &x.prev)
}

func (x *slotEntry) afterLoad() {}

func (x *slotEntry) StateLoad(m state.Source) {
	m.Load(0, &x.next)
	m.Load(1, &x.prev)
}

func init() {
	state.Register((*DynamicBytesFile)(nil))
	state.Register((*DynamicBytesFD)(nil))
	state.Register((*StaticDirectory)(nil))
	state.Register((*slotList)(nil))
	state.Register((*slotEntry)(nil))
}
